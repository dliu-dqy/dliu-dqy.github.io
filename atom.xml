<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DL-楽園</title>
  
  <subtitle>An Elysium</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dliu-dqy.github.io/"/>
  <updated>2020-05-24T13:31:15.347Z</updated>
  <id>http://dliu-dqy.github.io/</id>
  
  <author>
    <name>DL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RN学习笔记-3</title>
    <link href="http://dliu-dqy.github.io/2020/05/24/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
    <id>http://dliu-dqy.github.io/2020/05/24/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</id>
    <published>2020-05-24T13:28:09.000Z</published>
    <updated>2020-05-24T13:31:15.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RN学习笔记-3"><a href="#RN学习笔记-3" class="headerlink" title="RN学习笔记-3"></a>RN学习笔记-3</h1><h2 id="RN的构成"><a href="#RN的构成" class="headerlink" title="RN的构成"></a>RN的构成</h2><h3 id="构成1-React"><a href="#构成1-React" class="headerlink" title="构成1 React"></a>构成1 React</h3><h4 id="根据条件进行渲染"><a href="#根据条件进行渲染" class="headerlink" title="根据条件进行渲染"></a>根据条件进行渲染</h4><p>可以通过创建一个<strong>组件(func)</strong>来根据props内部的参数进行判断.最后,由render接收判断的结果并动态修改元素.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserGreeting</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎回来!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GuestGreeting</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>请先注册。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">// 尝试修改 isLoggedIn=&#123;true&#125;:</span></span><br><span class="line">  &lt;Greeting isLoggedIn=&#123;<span class="literal">false</span>&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="通过变量来渲染元素"><a href="#通过变量来渲染元素" class="headerlink" title="通过变量来渲染元素"></a>通过变量来渲染元素</h4><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br></pre></td></tr></table></figure><p>通过定义一个新变量来存储元素</p><h4 id="amp-amp-运算符"><a href="#amp-amp-运算符" class="headerlink" title="&amp;&amp;运算符"></a>&amp;&amp;运算符</h4><p>在 JavaScript 中，true &amp;&amp; expression 总是返回 expression，而 false &amp;&amp; expression 总是返回 false。</p><p>因此，如果条件是 <strong>true</strong>，&amp;&amp; <strong>右侧</strong>的元素就会被渲染.<br>如果是 <strong>false</strong>，React 会<strong>忽略</strong>并跳过它.</p><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p>? (true) : (false) 用法同上</p><h4 id="阻止渲染"><a href="#阻止渲染" class="headerlink" title="阻止渲染"></a>阻止渲染</h4><p>令render返回null即可.此方法不会影响函数的其他方法的进行.</p><hr><h3 id="列表-Keys"><a href="#列表-Keys" class="headerlink" title="列表/Keys"></a>列表/Keys</h3><h4 id="使用map-方法来创建列表"><a href="#使用map-方法来创建列表" class="headerlink" title="使用map()方法来创建列表"></a>使用<code>map()</code>方法来创建列表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">numbers</span>) =&gt;</span></span><br><span class="line">  &lt;li&gt;&#123;numbers&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>创建一个数组参数,并利用<code>map()</code>函数与<code>&lt;li&gt;&lt;/li&gt;</code>标签相对应</p><h4 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h4><p>Keys 可以在 DOM 中的某些元素被增加或删除的时候帮助 React 识别哪些元素发生了变化。是每一个元素被赋予的一个独一无二的确定的标识<br>通常使用数据的id作为Key,或者使用序列号索引 index.</p><h4 id="Key的声明位于在js代码块里-而非HTML代码块里"><a href="#Key的声明位于在js代码块里-而非HTML代码块里" class="headerlink" title="Key的声明位于在js代码块里,而非HTML代码块里"></a>Key的声明位于在js代码块里,而非HTML代码块里</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = props.value;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 错啦！你不需要在这里指定key:</span></span><br><span class="line">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class="line">      &#123;value&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function NumberList(props) &#123;</span></span><br><span class="line"><span class="regexp">  const numbers = props.numbers;</span></span><br><span class="line"><span class="regexp">  const listItems = numbers.map((number) =&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/错啦！元素的key应该在这里指定：</span></span><br><span class="line"><span class="regexp">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中Key在兄弟元素中是唯一的,但在全局中不一定唯一.<br>将Key作为传递参数而非Props的属性看待<br>因为Post 组件可以读出 <code>props.id</code>，但是不能读出 <code>props.key</code>.</p><p>可以在JSX中嵌入<code>map()</code></p><hr><p>等会儿去看看B+树了，数据库可真是个好东西，啧。</p><p><img src="/2020/05/24/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/react.png" alt="LOGO"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RN学习笔记-3&quot;&gt;&lt;a href=&quot;#RN学习笔记-3&quot; class=&quot;headerlink&quot; title=&quot;RN学习笔记-3&quot;&gt;&lt;/a&gt;RN学习笔记-3&lt;/h1&gt;&lt;h2 id=&quot;RN的构成&quot;&gt;&lt;a href=&quot;#RN的构成&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>RN学习笔记-2</title>
    <link href="http://dliu-dqy.github.io/2020/05/09/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://dliu-dqy.github.io/2020/05/09/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</id>
    <published>2020-05-09T13:07:30.000Z</published>
    <updated>2020-05-09T13:23:29.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RN学习笔记-2"><a href="#RN学习笔记-2" class="headerlink" title="RN学习笔记-2"></a>RN学习笔记-2</h1><h2 id="RN的构成"><a href="#RN的构成" class="headerlink" title="RN的构成"></a>RN的构成</h2><p>ps：上一章看漏了一个概念：自顶向下流动。这个概念的意思是，<br>在类内部，属性（即参数）的传递方向是从父元素向子元素流动的。</p><h3 id="构成1-React"><a href="#构成1-React" class="headerlink" title="构成1 React"></a>构成1 React</h3><h4 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h4><p>一种固定的参数，与上一章讲的state不同，其在函数内部是不可变的，是一个只读属性。跟state的区别是，props接收功能组件外部赋予的信息，而state负责在组件内部传输信息。</p><p>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">name:<span class="string">"233"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里规定了state内部的参数名。</span></span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Attri bute = &#123;<span class="keyword">this</span>.state.name&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/返回一个div标签以及内容</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Attri extends React.Component&#123;</span></span><br><span class="line"><span class="regexp"> render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;&#123;this.props.name&#125;&lt;/</span>h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//规定了Attri属性的展示方式，即&lt;h1&gt;标签</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类似于this.state.name=&gt;whis.props.name=&gt;&lt;h1&gt;内容    这样的流动方式</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="验证props"><a href="#验证props" class="headerlink" title="验证props"></a>验证props</h5><p>使用propTypes来验证参数的属性。如果是无效参数，则JS控制台给出警告，这时会强行转换格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Attribute.propTypes = &#123;</span><br><span class="line">a:propTypes.string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*这段代码写在Attribute类中，起验证作用。其中a为设定好的属性。</span></span><br><span class="line"><span class="comment">待验证的类型可以是多种多样的。</span></span><br><span class="line"><span class="comment">既可以是类似于array，number，bool这种简单属性，</span></span><br><span class="line"><span class="comment">也可以是node，elements这种待渲染的对象，</span></span><br><span class="line"><span class="comment">或者是选定值</span></span><br><span class="line"><span class="comment">(oneOf(['x','y']),</span></span><br><span class="line"><span class="comment">oneOfType([React.Proptypes.string,React.Proptypes.number])）</span></span><br><span class="line"><span class="comment">以及很多带有限定意味的定义式组合元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>几个很有React特色的约定。</p><ul><li><p>1.绑定事件属性的命名法：与HTML常用的全小写不同，采用驼峰命名。</p></li><li><p>2.使用函数而不是字符串来作为事件处理函数。</p></li><li><p>3.与HTML中一旦函数返回false便不执行该事件不同，必须使用preventDefault来阻止。<br>如：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line"><span class="comment">//这里定义为阻止这个函数执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'链接被点击'</span>);</span><br><span class="line"><span class="comment">//控制台跳出信息</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;<span class="comment">//调用函数</span></span><br><span class="line">    点我</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="事件中的属性绑定"><a href="#事件中的属性绑定" class="headerlink" title="事件中的属性绑定"></a>事件中的属性绑定</h5><p>类的方法默认是不绑定this的，如果不手动绑定this的话，调用这个函数时this的值为undefined  </p><p>解决方式：  </p><ul><li><p>1.<code>this.method = this.method.bind(this);</code><br>  利用<code>bind()</code>来绑定</p></li><li><p>2.属性初始化器予以绑定  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">     &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">       Click me</span><br><span class="line">     &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">   );</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/OR</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">     &lt;button onClick=&#123;(e) =&gt; this.handleClick(e)&#125;&gt;</span></span><br><span class="line"><span class="regexp">       Click me</span></span><br><span class="line"><span class="regexp">     &lt;/</span>button&gt;</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p>  后一种函数是  箭头函数*  的用法,不是很推荐使用。</p></li></ul><h5 id="向事件处理程序内部传参"><a href="#向事件处理程序内部传参" class="headerlink" title="向事件处理程序内部传参"></a>向事件处理程序内部传参</h5><ul><li><p>1.调用内部函数</p></li><li><p>2.使用<code>bind()</code>绑定参数</p></li></ul><p>这样一来主要的传参策略就可以得知了。</p><p><strong>箭头函数表达式为ES6中的一种函数声明范式。</strong><br><strong><code>var f = ([参数]) =&gt; 表达式（单一）</code></strong><br><strong>等价于</strong><br><strong><code>var f = function([参数]){return 表达式;}</code></strong></p><p><img src="/2020/05/09/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/react.png" alt="LOGO"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RN学习笔记-2&quot;&gt;&lt;a href=&quot;#RN学习笔记-2&quot; class=&quot;headerlink&quot; title=&quot;RN学习笔记-2&quot;&gt;&lt;/a&gt;RN学习笔记-2&lt;/h1&gt;&lt;h2 id=&quot;RN的构成&quot;&gt;&lt;a href=&quot;#RN的构成&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>RN学习笔记-1</title>
    <link href="http://dliu-dqy.github.io/2020/05/04/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://dliu-dqy.github.io/2020/05/04/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</id>
    <published>2020-05-04T11:36:12.000Z</published>
    <updated>2020-05-04T13:04:30.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RN的构成"><a href="#RN的构成" class="headerlink" title="RN的构成"></a>RN的构成</h1><h2 id="构成1-React"><a href="#构成1-React" class="headerlink" title="构成1 React"></a>构成1 React</h2><p>react是一个开源的JS框架，用于构建用户界面。</p><h3 id="react的依赖库"><a href="#react的依赖库" class="headerlink" title="react的依赖库"></a>react的依赖库</h3><p>核心库：react.min.js</p><p>DOM相关库：react-dom.min.js<br>    什么是DOM？：文档对象模型，一种标准编程接口，将文档视作一个树形结构，树的每个结点表示了一个HTML标签或标签内的文本项。</p><h3 id="react的最小可分单位是元素"><a href="#react的最小可分单位是元素" class="headerlink" title="react的最小可分单位是元素"></a>react的最小可分单位是元素</h3><p>新添加一个div标签，标签交由根DOM节点管理，通过函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>やばいです<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">ReactDOM.render(a,<span class="built_in">document</span>.getElementById(<span class="string">'xx'</span>))</span><br><span class="line"><span class="comment">//其中参数a是指由const定义的元素</span></span><br><span class="line"><span class="comment">//后面第二个参数为一个定位函数，用以确定标签id名为xx的元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"xx"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如何刷新元素"><a href="#如何刷新元素" class="headerlink" title="如何刷新元素"></a>如何刷新元素</h3><p>元素是不可变的，更改的方法是创建一个新的元素，并传入render方法。</p><p>使用setInterval(func,time)方法，每time（单位为毫秒）事件后调用一次函数func</p><p><strong>另一种方法：</strong><br>继承React.Component中的类，但感觉调用的层次更多了。好处在于可以用多层props来传多个值。</p><p>tip:React在render方法传入后会比较元素的不同之处，只渲染改变了的部分</p><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>看起来像XML的语法扩展。用处是声明上文中提到的<strong>元素</strong><br>例句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h4 id="可以将其编写为独立文件，并引入HTML文件里"><a href="#可以将其编写为独立文件，并引入HTML文件里" class="headerlink" title="可以将其编写为独立文件，并引入HTML文件里"></a>可以将其编写为独立文件，并引入HTML文件里</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/babel"</span> src=<span class="string">"filename.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS表达式与条件判断"><a href="#JS表达式与条件判断" class="headerlink" title="JS表达式与条件判断"></a>JS表达式与条件判断</h4><p>通过{}来应用 JavaScript 表达式与<strong>注释</strong></p><p>通过三元运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x==y?<span class="string">'1'</span>:<span class="string">'2'</span></span><br></pre></td></tr></table></figure><p>来替代 if else 语句</p><h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>推荐使用内联样式（即直接写在文件里）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> style1 = &#123;color = <span class="string">'#000000'</span>&#125;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1 style = &#123;myStyle&#125;&gt;React&lt;<span class="regexp">/h1&gt; , document.getElementById('xx')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>默认自动展开所有成员：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &lt;h1&gt;a&lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;b&lt;/</span>h2&gt;,</span><br><span class="line">];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;&#123;arr&#125;&lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('xx')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="React的组件"><a href="#React的组件" class="headerlink" title="React的组件"></a>React的组件</h3><h4 id="通过函数定义组件"><a href="#通过函数定义组件" class="headerlink" title="通过函数定义组件"></a>通过函数定义组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component_name</span> (<span class="params">props</span>)</span>&#123; <span class="keyword">return</span> yy; &#125;</span><br><span class="line"><span class="comment">//这里的yy为HTML标签组件</span></span><br></pre></td></tr></table></figure><h4 id="通过继承class来定义组件"><a href="#通过继承class来定义组件" class="headerlink" title="通过继承class来定义组件"></a>通过继承class来定义组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> yy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义React类"><a href="#自定义React类" class="headerlink" title="自定义React类"></a>自定义React类</h4><p>tip:原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyAttribute</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;props.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//通过props.name来获取下文定义的name</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">MyAttribute</span> <span class="attr">name</span>=<span class="string">"A"</span>/&gt;</span></span>;</span><br></pre></td></tr></table></figure><h4 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h4><p>就是通过大组件中调用小组件来输出多个原子组件</p><h3 id="React-state"><a href="#React-state" class="headerlink" title="React state"></a>React state</h3><p>通过属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state</span><br></pre></td></tr></table></figure><p>的改变来决定是否渲染页面</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>通过设置 Clock 组件<br>第一次将 Clock 加载到 DOM 中的时候，生成定时器。<br>称为<strong>挂载</strong>。</p><p>当 Clock 生成的这个 DOM 被移除的时候，清除定时器，<br>称为<strong>卸载</strong>。</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在输出至DOM后调用</span></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(</span><br><span class="line">      () =&gt; <span class="keyword">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//这里挂载了一个定时器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//生命周期钩子1</span></span><br><span class="line"> </span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">    <span class="comment">//卸载定时器</span></span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//生命周期钩子2</span></span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//在构造函数执行后调用该方法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;现在是 &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Clock /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>今天就看到这里吧。就当React入门惹</p><p>资料参考：<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></p><p><img src="/2020/05/04/RN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/react.png" alt="LOGO"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RN的构成&quot;&gt;&lt;a href=&quot;#RN的构成&quot; class=&quot;headerlink&quot; title=&quot;RN的构成&quot;&gt;&lt;/a&gt;RN的构成&lt;/h1&gt;&lt;h2 id=&quot;构成1-React&quot;&gt;&lt;a href=&quot;#构成1-React&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>水月雨银色飞船简评</title>
    <link href="http://dliu-dqy.github.io/2020/04/24/MoonDrop/"/>
    <id>http://dliu-dqy.github.io/2020/04/24/MoonDrop/</id>
    <published>2020-04-24T11:38:36.000Z</published>
    <updated>2020-04-24T11:55:04.683Z</updated>
    
    <content type="html"><![CDATA[<p>（以下内容均为极为主观的评价）  </p><p>最近想换个新的入耳式，看到有很多人推荐着水月雨的银色飞船，一看也才109块，<br>本着就当买牌子送耳机的想法，入手了。</p><p><img src="/2020/04/24/MoonDrop/box.jpg" alt></p><p>说实话水月雨这个牌子我以前是没有听说过的，以前用过的<strong>入耳式</strong>耳机大部分都是铁三角，森海塞尔以及索法，<br>尤其是铁三角，基本占据了曾用耳机的半壁江山。这些耳机覆盖150到900块的价格段，用以估计银船的大致价值区间  </p><p>__铁三角 __<br>IM50<br>CKB50<br>C550<br>CKR30</p><p><strong>森海塞尔</strong><br>Momentum In-Ear<br>CX2.00  </p><p><strong>索尼</strong><br>XB75AP<br>A1AP</p><hr><h2 id="听感"><a href="#听感" class="headerlink" title="听感"></a>听感</h2><p>音乐选用以下几首：</p><p><a href="http://music.163.com/song?id=1349929271&userid=286557605" target="_blank" rel="noopener"><strong>Welcome To Va-11 Hall-A</strong></a><br><a href="http://music.163.com/song?id=4939777&userid=286557605" target="_blank" rel="noopener"><strong>MEN OF DESTINY</strong></a><br><a href="http://music.163.com/song?id=565970061&userid=286557605" target="_blank" rel="noopener"><strong>グーラ領</strong></a><br><a href="http://music.163.com/song?id=1361188105&userid=286557605" target="_blank" rel="noopener"><strong>チカっとチカ千花っ♡</strong></a>  </p><hr><p>其中第一首是偏舒缓的Electro乐曲（也不尽然），鼓点以及电子琴的尾音比较考验结像能力，在我看来银船的结像能力是能划分到<strong>IM50</strong>这一档的。令人惊艳的是，<br>银船很好地做到了分离不同频段的乐器，并不会有混在一起的感受。这一点，上面的一部分耳机是做不到的，比如说<strong>小馒头</strong>（点名批评），对比下来总有种解析力不足的感觉。<br>缺点么，就是在低频的摩擦音转中高频的时候会有莫名其妙的刺音。</p><hr><p>第二首是上个世纪的摇滚乐，出自高达0083，依旧是很强的分离功效，但感觉上，像是乐器是从不同的方向进入耳膜，人声交错着乐器进入耳膜，鼓点的爆发力很强。</p><hr><p>第三首则是异度之刃2的背景音乐，宏大的多声部将声场极大地延伸，代入感极强。这一点与<strong>A1AP</strong>有相似之处。问题这次出现在了低音的瞬态上，看来低频是个绕不过去的坎了（笑）。</p><hr><p>第四首则测试了甜美女声下的表现，感觉跟<strong>A1AP</strong>一比的话不够甜。但这一点其实也可以理解为没有加上太多音染。</p><hr><p>结论是这款耳机基本在解析力上向<strong>IM50</strong>比肩，整体听感甚至达到了<strong>A1AP</strong>的水平（除去数码味）  </p><p>99买亏不亏？一点都不亏，甚至算是做慈善了。（水月原话）</p><p>对水家的调音赞一个，总而言之挺符合我的口味的。</p><p>最后附上皂片</p><p><img src="/2020/04/24/MoonDrop/earphone.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（以下内容均为极为主观的评价）  &lt;/p&gt;
&lt;p&gt;最近想换个新的入耳式，看到有很多人推荐着水月雨的银色飞船，一看也才109块，&lt;br&gt;本着就当买牌子送耳机的想法，入手了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/04/24/MoonDrop/box.jpg&quot; alt&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>RX78 GP03D 石斛兰</title>
    <link href="http://dliu-dqy.github.io/2020/04/16/PhotoTest/"/>
    <id>http://dliu-dqy.github.io/2020/04/16/PhotoTest/</id>
    <published>2020-04-16T11:41:34.000Z</published>
    <updated>2020-04-16T12:07:31.286Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/16/PhotoTest/1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/04/16/PhotoTest/1.jpg&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Blog-Initialized</title>
    <link href="http://dliu-dqy.github.io/2020/04/16/hello-world/"/>
    <id>http://dliu-dqy.github.io/2020/04/16/hello-world/</id>
    <published>2020-04-16T01:45:18.495Z</published>
    <updated>2020-04-16T11:37:58.236Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博客，稍微写点规划吧</p><p>主要是为了记录一些好玩的东西，学习的积累，以及一些前端技术的实践。</p><p>短期的目标是实现ナツメ的Live-2d</p><p>就这样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一篇博客，稍微写点规划吧&lt;/p&gt;
&lt;p&gt;主要是为了记录一些好玩的东西，学习的积累，以及一些前端技术的实践。&lt;/p&gt;
&lt;p&gt;短期的目标是实现ナツメ的Live-2d&lt;/p&gt;
&lt;p&gt;就这样。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
